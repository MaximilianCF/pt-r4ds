# Fluxo de trabalho: obtendo ajuda {#sec-workflow-getting-help}

```{r}
#| echo: false

source("_common.R")
```

Este livro não é uma ilha; não existe nenhuma fonte específica que fará você se tornar uma pessoa expert em R.
Assim que você começar a aplicar as técnicas descritas neste livro nos seus dados, você logo terá questionamentos que nós não respondemos aqui.
Esta seção elenca algumas dicas sobre como obter ajuda e também te ajudar a continuar aprendendo.

## O Google é seu amigo

Se você travar, começe com o Google.
Tipicamente colocando "R" em uma busca é o suficiente para restringi-la para resultados relevantes: se a busca não for útil, geralmente significa que não existem muitos resultados específicos.
Além do mais, adicionando na busca nomes de pacotes como "tidyverse" ou "ggplot2" irá ajudar a direcionar os resultados ao seu código de maneira mais familiar a você, por exemplo: "como fazer um boxplot no R com ggplot2" ao invés de "como fazer um boxplot no R".
Particularmente, o Google é muito bom com mensagens de erro.
Se você tiver uma mensagem de erro e não tem ideia do que ela significa, dê um Google com a mensagem!
Há chances de que outras pessoas também tenham ficado confusas com o erro anteriormente e em algum lugar da web você terá ajuda.
(Se a mensagem de erro não estiver em inglês, execute `Sys.setenv(LANGUAGE = "en")` e execute novamente o código; provavelmente encontrará ajuda com mensagens de erro em inglês.)

Se o Google não ajudar tente o [Stack Overflow](https://stackoverflow.com).
Comece reservando tempo para buscar uma resposta já existente, incluindo `[R]` para restringir sua busca por perguntas e respostas que usem R.

## Criando um exemplo reprodutível (*reprex*)

Se a sua busca no Google não retornar nenhuma resposta satisfatória, é uma boa ideia preparar um **reprex**, termo para  **ex**emplo **repr**odutível (do inglês: **repr**oducible **ex**ample).
Um bom *reprex* facilita para que outras pessoas possam te ajudar, e geralmente você poderá resolver o problema durante a criação dele.
Existem duas partes na criação de um *reprex*:

-   Primeiro, você precisa permitir a reprodução do seu código.
    Isto é, significa que você precisa copiar tudo, isto é, incluir qualquer comando `library()` e criar todos os objetos necessários.
    A maneira mais fácil de fazer isto é usando o pacote reprex.

-   Segundo, você precisa ser minimalista.
    Exclua tudo que não for relacionado ao seu código.
    Usualmente isto envolve a criação de um objeto R menor e mais simples do que aquele que você está criando de verdade ou até mesmo usar dados internos[^workflow-help-nt-1].
    
[^workflow-help-nt-1]: **Nota de tradução**: São dados que estão sempre disponíveis no R (ex. mtcars), e são bastante utilizados em exemplos, aulas, tutoriais, entre outros. Outra opção interessante é utilizar dados do pacote `{dados}` para criar exemplos reprodutíveis.

Isto parece muito trabalhoso!
E pode ser, mas tem um grande retorno:

-   Em 80% dos casos, a criação de um excelente reprex mostrará a raiz do seu problema.
    É incrível como o processo de escrever um exemplo pequeno e auto-suficiente ajuda você a responder sua própria dúvida.

-   Nos 20% restantes, você terá entendido a essência do seu problema de uma maneira que é fácil para os outros entenderem.
    Isto aumenta consideravelmente suas chances de obter ajuda!

Ao criar um reprex manualmente, é fácil esquecer de algo por acidente, o que significa que seu código pode não ser executado no computador de outra pessoa.
Evite esse problema utilizando o pacote reprex, que é instalado como parte do tidyverse.
Let's say you copy this code onto your clipboard (or, on RStudio Server or Cloud, select it):

```{r}
#| eval: false

y <- 1:4
mean(y)
```

Then call `reprex()`, where the default output is formatted for GitHub:

``` r
reprex::reprex()
```

A nicely rendered HTML preview will display in RStudio's Viewer (if you're in RStudio) or your default browser otherwise.
The reprex is automatically copied to your clipboard (on RStudio Server or Cloud, you will need to copy this yourself):

````         
``` r
y <- 1:4
mean(y)
#> [1] 2.5
```
````

This text is formatted in a special way, called Markdown, which can be pasted to sites like StackOverflow or Github and they will automatically render it to look like code.
Here's what that Markdown would look like rendered on GitHub:

```{r}
#| eval: false

y <- 1:4
mean(y)
#> [1] 2.5
```

Anyone else can copy, paste, and run this immediately.

There are three things you need to include to make your example reproducible: required packages, data, and code.

1.  **Packages** should be loaded at the top of the script so it's easy to see which ones the example needs.
    This is a good time to check that you're using the latest version of each package; you may have discovered a bug that's been fixed since you installed or last updated the package.
    For packages in the tidyverse, the easiest way to check is to run `tidyverse_update()`.

2.  The easiest way to include **data** is to use `dput()` to generate the R code needed to recreate it.
    For example, to recreate the `mtcars` dataset in R, perform the following steps:

    1.  Run `dput(mtcars)` in R
    2.  Copy the output
    3.  In reprex, type `mtcars <-`, then paste.

    Try to use the smallest subset of your data that still reveals the problem.

3.  Spend a little bit of time ensuring that your **code** is easy for others to read:

    -   Make sure you've used spaces and your variable names are concise yet informative.

    -   Use comments to indicate where your problem lies.

    -   Do your best to remove everything that is not related to the problem.

    The shorter your code is, the easier it is to understand and the easier it is to fix.

Finish by checking that you have actually made a reproducible example by starting a fresh R session and copying and pasting your script.

Creating reprexes is not trivial, and it will take some practice to learn to create good, truly minimal reprexes.
However, learning to ask questions that include the code, and investing the time to make it reproducible will continue to pay off as you learn and master R.

## Investing in yourself

You should also spend some time preparing yourself to solve problems before they occur.
Investing a little time in learning R each day will pay off handsomely in the long run.
One way is to follow what the tidyverse team is doing on the [tidyverse blog](https://www.tidyverse.org/blog/).
To keep up with the R community more broadly, we recommend reading [R Weekly](https://rweekly.org): it's a community effort to aggregate the most interesting news in the R community each week.

## Summary

This chapter concludes the Whole Game part of the book.
You've now seen the most important parts of the data science process: visualization, transformation, tidying and importing.
Now you've got a holistic view of the whole process, and we start to get into the details of small pieces.

The next part of the book, Visualize, does a deeper dive into the grammar of graphics and creating data visualizations with ggplot2, showcases how to use the tools you've learned so far to conduct exploratory data analysis, and introduces good practices for creating plots for communication.
